第一章 概述
java白皮书的关键术语：
简单性：代码简单：包括语法简单（与C++相比没有头文件 指针运算 （指针语法）结构 联合 操作符重载 虚基类等）和 对运行Java项目硬件的要求简单（能够在小型机器上独立运行，基本解释器以及类支持大约40kB，加上基础的标准类库和对线程的支持大约一共需要215KB）,现在随着版本的增加类库越来越大，但是有一个独立的较小类库的java微型版（Java Micro Edition）用于嵌入式设备。
面向对象：面向对象设计是一种程序设计技术，将重点放在数据和对象的接口上。面向对象是关注实现的功能，而面向过程更加关注功能实现的步骤。java的面向对象特性与C++旗鼓相当，主要不同点在于C++支持多继承，在java中使用接口的概念取而代之。以及java的元类（metaclass）模型。
网络技能（Network-savvy）：java有一个扩展的例程库，用于处理像HTTP和FTP这类的TCP/IP协议。对socket通信进行了封装。远程方法调用机制使得分布式对象之间可以进行通信。
健壮性：java语言能够在编译时检测出程序的错误，并且抛出异常(Checked Exception)，并且java采用的指针模型可以消除重写内存和损坏数据的可能性。
安全性：java适用于网络/分布式环境，所以投入了大量精力在安全方面。
体系结构中立：编译器生成一个体系结构中立的目标文件格式，这是一种编译过的代码，只要有java运行时系统就可以在许多处理器上运行，java编译器通过生成与特定的计算机体系结构无关的字节码指令来实现这一特性。
这样的代码执行效率会比执行机器指令差，但是jvm虚拟机有一个选项就是将使用最频繁的字节码序列翻译成机器码以提高代码的执行效率，这一过程被称为即时编译。虚拟机还有一些其他的优点，比如检测指令序列的行为以增强安全性。
可移植性：与C/C++相比，java规范中没有“依赖具体实现”的地方。基本数据类型的大小以及有关算法都做了明确的说明。例如，java中的int永远是32位，但是在C/C++中int可能是16位整数 32位整数 亦可能是编译器提供商指定的其他大小 唯一的限制只是 int类型的大小不能低于short不能高于long。数据类型具有固定的大小消除了代码移植时的问题，同时 二进制数据以固定的格式进行存储和传输，消除了字节顺序的困扰，字符串是用标准的Unicode格式存储的。
解释型：java 解释器可以在任何移植了解释器的机器上执行java字节码。
高性能：字节码可以快速地翻译成运行这个应用程序的特定CPU的机器码。
多线程：多线程可以带来更好的交互响应和实时行为。只要操作系统支持，Java中的线程就可以利用多个处理器，java把多线程的实现交给了底层的操作系统和线程库来实现。
动态性:java类库中可以自由的添加新的方法和实例变量而对客户端没有任何影响。
Java Applet与Internet
  在网页中运行Java程序成为Applet。就是用户加载出java代码在启用java的web浏览器中执行代码。
Java发展简史:
1991年开始设计使用在有线电视转换盒中的语言。1996年发布java1.0版本。1998年发布java1.2版本。2004年相继发布java1.4版本（支持断言）和java5.0（1.5）版本（支持泛型 “for each”循环 多元可变参数 自动打包 元数据 枚举 静态导入）。2006年发布java6。
第二章 Java程序设计环境
java术语：
    JDK（Java development kit） Java开发工具箱 编写java程序的程序员使用的软件
    JRE（Java Runtime Environment）java程序运行环境 运行java程序的用户所使用的软件
    SE（Stadard Edition）标准版本 用于桌面或简单的服务器应用的java平台
    ME（Micro Edition）  微型版本 用于微型手机和其他小型设备的java平台
    J2（Java2）  过时术语 描述1998~2006之间的java版本
    SDK（Software Development Kit） 过时术语 描述1998~2006之间的JDK版本，注意与Android Development Kit区分
安装jDK
  1.下载与操作系统匹配的JDK
  2.设置执行路径（设置环境变量）
  3.安装源代码库和文档：库源文件在JDK中以一个压缩文件src.zip的形式发布，必须将其解压后才能访问源代码。解压步骤：1.确保JDK已经安装，并且jdk/bin目录在执行路径中（环境变量）2.打开shell窗口进入jdk目录 3.建立一个子目录src并进入 4.执行命令jar xvf ../src.zip 文档包含在一个压缩文件中是一个独立于JDK的压缩文件可以官网下载文档并且将其解压到jdk目录中。
选择开发环境
    命令行工具
      使用javac（Java编译器）将一个java文件编译成class文件
      使用java启动JRE来加载相应的class文件并且调用main方法。
    IDE
      本书推荐使用eclipse但是我准备使用IntelliJ IDEA
第三章 Java基本的程序设计结构
  3.1一个简单的程序结构

  public class FirstSample {
      public static void main(String[] args){
          System.out.println("helloworld");
      }
  }
  1.java对大小写敏感，如果出现了关键字的大小写拼写错误程序就不会运行。
  2.关键字public是访问修饰符（access modifier），它用于控制程序的其他部分对这段代码的访问级别。
  3.关键字class表明java程序中的全部内容都包含在类中。这里类只需要将类作为一个加载程序逻辑的容器，程序逻辑定义了应用程序的行为。类是构建所有Java应用程序和applet的构件块。Java应用程序的全部内容都必须放置在类中。
  4.关键字class后面紧跟类名。Java中定义类名的规则就是必须以字母开头，不能使用Java保留字，但是标准的类名规范是驼峰命名法。
  5.源代码的文件名必须与公有类的名字相同，并且以.java作为扩展名。
  6.每一个Java应用程序都必须有一个main方法。并且main方法必须有一个外壳类（main方法必须定义在类中）。
  3.2注释

  Java中有三种注释方式：单行注释 //被注释内容  多行注释 /*被注释内容*/  文档注释 /**被注释内容*/ 文档注释可以自动的生成文档  注意：注释不能嵌套
  3.3数据类型 注意：java中没有任何无符号类型。
  3.3.1整型
  整形用于表示没有小数部分的数值，它允许是负数。Java提供了4种整型：byte（1个字节） short（2个字节） int（4个字节） long（8个字节）  长整型有一个后缀L（如4000000L）。十六进制数值有一个前缀0x（如0xCAFE）。八进制有一个前缀0（如010对应十进制中的8）。
  3.3.2浮点类型
  浮点类型用于表示有小数部分的数值。Java中提供了2种浮点类型float（4个字节） double（8个字节）double类型的数值精度是float类型的两倍。float类型的数值有一个后缀F(如 3.402F)，没有后缀F的浮点数值默认为double类型。double类型也可以在浮点数值后面添加后缀D。
  所有的浮点数值计算都遵循IEEE 754规范（IEEE是美国电气电子工程师学会）下面是用于表示溢出和出错情况的三个特殊的浮点数值：1.正无穷大 2.负无穷大 3.NaN(不是一个数字)。例如，一个正整数除以0的结果是正无穷大，计算0/0或者负数的平方根结果为NaN。
  浮点数值不适用于禁止出现舍入误差的金融计算中，原因是浮点数值是采用二进制系统表示，而在二进制系统中无法精确表示分数1/10，这就像十进制无法精确的表示1/3一样。如果需要在数值计算中不含有任何的舍入误差，就应该使用BigDecimal类。
  补充：小数转换为二进制的方法：对小数点以后的数乘以2，有一个结果，取结果的整数部分（不是1就是0喽），然后再用小数部分再乘以2，再取结果的整数部分……以此类推，直到小数部分为0或者位数已经够了就OK了。
       演示： 0.125 ×2=0.25 .......................0
             0.25×2=0.5...........................0
             0.5×2=1.0............................1
             即 0.125的二进制表示为小数部分为0.001
             记住，乘到小数为0。排序：正序。
             验证：0.001：0×2的0次方+0×2的-1次方+0×2的-2次方+1×2的-3次方=1/8=0.125.正确。
       现在来说明0.1转二进制不能表示的原因：
             0.1×2=0.2 .....................0
             0.2×2=0.4 .....................0
             0.4×2=0.8 .....................0
             0.8×2=1.6......................1
             0.6×2=1.2......................1
             0.2×2=0.4......................0
             .....
             是无限循环的。
3.3.3 char类型
char用来表示单个字符。通常来表示字符常量。'A'是编码65所对应的字符常量。与‘A’不同“A”是一个包含字符A的字符串。Unicode编码单元可以表示为十六进制值，其范围从\u0000到\Uffff。
代码点（code point）是指与一个代码表中的某个字符对应的代码值。UTF-16编码采用不同长度的编码表示所有Unicode代码点。在Java中，char类型用UTF-16编码描述一份代码单元。
3.3.4 boolean类型
boolean类型有两个值：flase和true，用来判定逻辑条件。整形和布尔值之间不能进行相互转换。也就是说不能使用0直接进行逻辑判断。
3.4 变量
  在Java中，每一个变量属于一种类型（type）。声明变量时，变量所属类型位于变量名之前。变量名中所有字符都是有意义的并且大小写敏感，变量名长度没有限制。可以在一行中声明多个变量（int j,j;//both are integers）但是不推荐这样做，降低了代码的可读性。
  补充：如果想知道哪些字符属于java中的字母可以使用Character类中的isJavaIdentifierStart和isJavaIdentifierPart方法进行检测。
3.4.1 变量的初始化
  声明一个变量后，必须用赋值语句对变量进行显式初始化，不要使用未被初始化的变量。在Java中变量的声明初始化代码可以放在任何地方，推荐放在变量第一次使用的地方。
3.4.2 常量
  在Java中利用关键字final声明常量。关键字final表示的变量只能被赋值一次，一旦被赋值之后就不能够再更改了。习惯上常量名使用大写。在Java中，经常希望某个常量可以在一个类的多个方法中使用，通常将这些常量称为类常量，可以使用关键字static final设置一个类常量。
  注意：类常量要定义在main方法的外部。因此，在同一个类的其他方法中也可以使用这个常量。如果这个类常量使用public修饰，那么其他类的方法也能够使用这个常量。
3.5 运算符
  在Java中，使用算数运算符 +、-、*、/ 表示加减乘除运算，当参与/运算的两个操作数都是整数时，表示整数除法，否则表示浮点除法。整数的求余（取模）操作用%表示。
  注意：整数被0除将会产生一个异常，而浮点数被0除将会得到无穷（Infinity）大或NaN结果。
  可以在赋值语句中采用一种简化的格式来书写二元算数运算符。例如：x+=4等价于x=x+4。通常将运算符放在赋值符号的左侧。
  注意 strictfp关键字，使用strictfp关键字标记的方法必须使用严格的浮点计算来产生理想的效果。
3.5.1 自增运算符与自减运算符
  自增和自减运算都是改变的变量的值，所以他的操作数不能是数值。例如：4++就是一条非法的语句。
  自增和自减运算有两种形式，一种是前缀（++n），一种是后缀（n++）。前缀形式是变量先进行+1运算再使用变量，后缀形式是先使用变量在进行+1运算。
3.5.2 关系运算符与boolean运算符
  各种关系运算符>、<、<=、>=、&&、||、!、三元运算符。这些常用运算符就不一一表述了。
3.5.3 位运算符（难点）
  在处理整数数值时，可以直接对组成整数数值的各个位进行操作。这意味着可以使用屏蔽技术获得整数中的各个位。位运算符包括：&(与)、|(或)、^(异或)、~(非)
  另外，">>"和"<<"运算符将二进制位进行右移或左移操作。当需要建立位模式屏蔽某些位时，使用这两个运算符十分的方便。">>>"（无符号右移）运算符将用0填充高位">>"运算符用符号位填充高位。没有"<<<"运算符
3.5.4 数学函数与常量
  Math类中包含了各种各样的数学函数：Math.sqrt();取平方根操作。Math.pow(x,a);表示x的a次幂。Math.sin(); Math.cos(); Math.tan(); Math.atan(); Math.atan2();这些是常用的三角函数。Math.exp();Math.log();这两个是指数函数以及它的反函数自然对数。Math.PI、Math.E 表示π和e常量的近似值。
  注意：在Math类中，为了达到最快的性能，所有的方法都使用计算机浮点单元中的例程。如果得到一个可以预测的结果比运行速度更重要的话，那么就应该使用StrictMath类。它使用“自由发布的Math库”(fdlibm)实现算法，以确保在所有的平台上得到相同的结果。
3.5.5 数值类型之间的转换
  在程序运行时，经常需要将一种数值类型转换为另一种数值类型。int类型---->float类型（会损失精度）long类型---->float类型（会损失精度）long类型---->double类型（会损失精度）其他类型之间的相互转换没有精度的损失。
  当使用两个数值进行二元操作时（例如n+f，n是整数，f是浮点数），先将两个操作数转换为同一种类型，然后再进行计算。
    如果两个操作数中有一个是double类型的，另一个操作数就会转换为double类型。
    否则，如果其中一个操作数是float类型，另一个操作数就会转换成float类型。
    否则，如果其中一个操作数是long类型，另一个操作数就会转换成long类型。
    否则，两个操作数都将被转换为int类型。
3.5.6 强制类型转换
  强制类型转换有时会损失一些精度，语法操作就是在圆括号中给出想转换的数据类型，后面紧跟待转换的变量名。如：double x = 9.997;int nx = (int)x; 这时nx = 9;很多时候想对浮点数进行舍入运算，以便得到最接近的整数，这时就得使用Math.round()方法：double x = 9.997; int nx = (int)Math.round(x); 现在nx = 10。当调用round方法的时候，仍然需要强制类型转换。原因是round返回的结果是long类型，由于存在信息丢失的可能性，所以只有使用显式的强制类型转换才能够将long类型转换成int类型。
  不要在boolean类型与任何数值类型之间进行强制类型转换，这样可以发生错误，如有必要可以使用三元表达式进行赋值。
3.5.7 括号与运算符级别
  下面这个表是运算符号的优先级排列，不同优先级的运算符号排列到一起，按照优先级的高低进行运算，如果相同优先级的运算符排列到一起按照结核性来进行运算。只有?:和+=、-=、*=、/=是右结合运算符，也就是说从右往左计算，其他的都是从左往右进行计算。
  例如：a&&b||c  由于&&的优先级比||高，所以相当于a&&(b||C)。再例如：a+=b+=c  由于+=是右结合运算符，所以从右往左进行运算，即:a+=(b+=c);
  -------------------------------------------------------------------------------|-------------------
  运算符                                                                          |     结合性
  -------------------------------------------------------------------------------|-------------------
  []  .  ()(方法调用)                                                             |    从左向右
  ---------------------------------------------------------------------------------------------------
  !   ~  ++  --  +(一元运算)  -(一元运算)  ()(强制类型转换)  new                      |    从左向右
  ---------------------------------------------------------------------------------------------------
  *   /   %                                                                      |    从左向右
  ---------------------------------------------------------------------------------------------------
  +   -                                                                          |    从左向右
  ---------------------------------------------------------------------------------------------------
  <<   >>   >>>                                                                  |    从左向右
  ---------------------------------------------------------------------------------------------------
  <    <=   >   >=   instanceof                                                  |    从左向右
  ---------------------------------------------------------------------------------------------------
  ==   !=                                                                        |    从左向右
  ---------------------------------------------------------------------------------------------------
  &                                                                              |    从左向右
  ---------------------------------------------------------------------------------------------------
  ^                                                                              |    从左向右
  ---------------------------------------------------------------------------------------------------
  |                                                                              |    从左向右
  ---------------------------------------------------------------------------------------------------
  &&                                                                             |    从左向右
  ---------------------------------------------------------------------------------------------------
  ||                                                                             |    从左向右
  ---------------------------------------------------------------------------------------------------
  ?:                                                                             |    从右向左
  ---------------------------------------------------------------------------------------------------
  =   +=   -=   *=   /=   %=   &=   |=   ^=   <<=   >>=    >>>=                  |    从右向左
  ---------------------------------------------------------------------------------------------------

3.5.8 枚举类型
  当变量取值只在一个有限的集合内。例如：销售的服装只有小、中、大和超大这四种尺寸，针对这种情况，可以自定义枚举类型。枚举类型包括有限个命名的值。
